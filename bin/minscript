#!/usr/bin/env coffee
vm       = require 'vm'
fs       = require 'fs'
util     = require 'util'
readline = require 'readline'
path     = require 'path'
Module   = require 'module'

minscript = require '../src/minscript'

translate = (source)->
  code = fs.readFileSync(source).toString()
  minscript.compile(code)

compileFile = (source)->
  js = translate(source)
  name = source.split('.')[0..-2].join(".")
  fs.writeFileSync("#{name}.js", js)

run = (ms)->
  js = translate(ms)
  console.log js

  mainModule = require.main
  mainModule.filename = process.argv[1] = '.'
  mainModule.moduleCache and= {}
  dir = fs.realpathSync '.'
  mainModule.paths = require('module')._nodeModulePaths dir

  mainModule._compile js, mainModule.filename

requireMS = (mod, source)->
  raw = fs.readFileSync source, 'utf8'
  mod._compile _compile(raw), source

if require.extensions
  require.extensions[".ms"] = requireMS

repl = ->
  ctx         = vm.createContext()
  ctx.console = console;
  ctx.require = require;

  rl = readline.createInterface
    input: process.stdin
    output: process.stdout

  rl.setPrompt('MinScript > ')
  rl.prompt()

  buffer = ''

  rl.on 'line', (line)->
    buffer += "\n#{line}"

    open_count  = (buffer.match(/\(/g) or []).length
    close_count = (buffer.match(/\)/g) or []).length

    if open_count is close_count
      ast = minscript.ast(buffer)
      console.log ast
      js = minscript.generate(ast, "this")
      console.log js
      console.log "=>", vm.runInContext(js, ctx)
      buffer = ''
      rl.prompt()
    else
      rl.prompt()

switch process.argv[2]
  when 'repl'
    repl()
  when 'compile'
    compileFile(process.argv[3])
  else
    if process.argv[2]
      run(process.argv[2])
    else
      repl()
