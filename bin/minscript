#!/usr/bin/env coffee
vm       = require 'vm'
fs       = require 'fs'
util     = require 'util'
readline = require 'readline'

parser  = require '../lib/parser'
emitter = require '../lib/emitter'
wrapper = require '../lib/wrapper'

translate = (source)->
  code = fs.readFileSync(source).toString()
  ast  = parser.parse(code)

  namespace = ast.filter((s)-> s[0] is 'ns')[0]
  throw "Missing namespace declaration" unless namespace

  cleanAst = ast.filter (s)-> s[0] isnt 'ns'
  gen = emitter.init("exports")
  wrapper.wrap namespace[1], gen.emit(cleanAst)

compile = (source)->
  js = translate(source)
  name = source.split('.')[0..-2].join(".")
  fs.writeFileSync("#{name}.js", js)

requireMS = (source)->
  #

ctx = vm.createContext()
ctx['console'] = console
ctx['require'] = requireMS

run = (js)->
  vm.runInContext(translate(js), ctx)

repl = ->
  replEmitter = emitter.init()

  rl = readline.createInterface
    input: process.stdin
    output: process.stdout

  rl.setPrompt('MinScript > ')
  rl.prompt()

  buffer = ''

  rl.on 'line', (line)->
    buffer += "\n#{line}"

    open_count  = (buffer.match(/\(/g) or []).length
    close_count = (buffer.match(/\)/g) or []).length

    if open_count is close_count
      ast = parser.parse(buffer)
      console.log ast
      js = replEmitter.emit(ast)
      console.log js
      console.log "=>", vm.runInContext(js, ctx)
      buffer = ''
      rl.prompt()
    else
      rl.prompt()

switch process.argv[2]
  when 'repl'
    repl()
  when 'compile'
    compile(process.argv[3])
  else
    if process.argv[2]
      run(process.argv[2])
    else
      repl()
